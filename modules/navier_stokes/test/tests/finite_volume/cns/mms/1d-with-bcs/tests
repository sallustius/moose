[Tests]
  issues = '#16758'
  design = 'navier_stokes/fv.md'
  [1d-upwind]
    type = PythonUnitTest
    input = test.py
    test_case = Test1DUpwind
    requirement = 'The system shall be able to solve compressible fluid flow kernels for mass, momentum, and energy with two physical boundary conditions on the subsonic inlet and one physical boundary condition on the outlet and display first order convergence for all variables when using a first-order upwind scheme for the convection terms.'
    ad_indexing_type = 'global'
    required_python_packages = 'pandas matplotlib'
  []
  [1d-average]
    type = PythonUnitTest
    input = test.py
    test_case = Test1DAverage
    requirement = 'The system shall be able to solve compressible fluid flow kernels for mass, momentum, and energy with two physical boundary conditions on the subsonic inlet and one physical boundary condition on the outlet and display first order convergence for all variables when using a second-order central differencing scheme for the convection terms.'
    ad_indexing_type = 'global'
    required_python_packages = 'pandas matplotlib'
  []
  [1d-free-flow-hllc]
    type = PythonUnitTest
    input = test.py
    test_case = Test1DFreeFlowHLLC
    requirement = 'The system shall exhibit first order convergence for all variables for the free-flow Euler equations using a HLLC discretization scheme for the advection flux and with specified temperature and momentum at one boundary and specified pressure at another boundary.'
    required_python_packages = 'pandas matplotlib'
  []
  [1d-porous-hllc]
    type = PythonUnitTest
    input = test.py
    test_case = Test1DPorousHLLC
    requirement = 'The system shall exhibit first order convergence for all variables for the porous Euler equations using a HLLC discretization scheme for the advection flux and with specified temperature and momentum at one boundary and specified pressure at another boundary.'
    required_python_packages = 'pandas matplotlib'
  []
  [kurganov_tadmor]
    requirement = 'The system shall exhibit first order convergence for all variables for the porous Euler equations using a Kurganov-Tadmor discretization scheme for the advection flux, with specified temperature and momentum at one boundary and specified pressure at another boundary, and including continuously varying porosity'
    [1d-porous-kt-conservative]
      type = PythonUnitTest
      input = test.py
      test_case = Test1DPorousKTConservative
      required_python_packages = 'pandas matplotlib'
      detail = 'when containing a linear drag term and using a conservative variable set'
    []
    [1d-porous-kt-primitive]
      type = PythonUnitTest
      input = test.py
      test_case = Test1DPorousKTPrimitive
      required_python_packages = 'pandas matplotlib'
      detail = 'when using a primitive variable set (and not containing a drag term)'
    []
  []
  [sources_give_hllc_problems_irregular]
    requirement = 'The system displays issues when trying to solve hyperbolic equations with sources when using a Godunov method with HLLC approximate Riemann solver on an irregular grid'
    [hllc_with_volume_source]
      type = Exodiff
      input = 'straight-channel-hllc.i'
      exodiff = straight-channel-hllc_out.e
      detail = 'when the source has a cell-centered volumetric discretization'
    []
    [hllcs]
      type = Exodiff
      input = 'straight-channel-hllcs.i'
      exodiff = straight-channel-hllcs_out.e
      detail = 'when the source has a wave-speed based discretization (can thinking of upwinding here)'
    []
    [centered]
      type = Exodiff
      input = 'straight-channel-centered.i'
      exodiff = 'straight-channel-centered_out.e'
      detail = 'However, a centered (average) discretization, not based on Godunov/Riemann shows what the correct solution should be.'
    []
  []
  [sources_give_hllc_problems_regular]
    requirement = 'On a regular grid, using a HLLC scheme to calculate inter-cell fluxes, the system shall show, via the momentum variable'
    [conserved]
      type = Exodiff
      input = 'regular-straight-channel.i'
      exodiff = 'regular-straight-channel_out.e'
      detail = 'conservation of mass when no sources are present'
      cli_args = "FVKernels/inactive='drag'"
    []
    [non_conserved]
      input = 'regular-straight-channel.i'
      exodiff = 'regular-straight-channel-sources_out.e'
      detail = 'violation of conservation of mass when sources are present'
      type = Exodiff
      cli_args = 'Outputs/file_base=regular-straight-channel-sources_out'
    []
    [non_conserved_finer]
      input = 'regular-straight-channel.i'
      exodiff = 'regular-straight-channel-sources-nx-150_out.e'
      detail = 'lesser violation of conservation of mass when sources are present and the mesh is refined'
      type = Exodiff
      cli_args = 'Outputs/file_base=regular-straight-channel-sources-nx-150_out Mesh/gen_mesh/nx=150'
    []
  []
[]
