[Tests]
  [darcy_u_impl_steady]
    type = Exodiff
    input = steady-sup-vel-form-step-change.i
    exodiff = steady-sup-vel-form-step-change_out.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equations with a step change in porosity using an implementation in which the nonlinear momentum varible incorporates the superficial velocity.'
    cli_args = "Mesh/cartesian/nx=100 Outputs/out/execute_on='final'"
  []
  [darcy_u_impl_transient]
    type = Exodiff
    input = transient-sup-vel-form-step-change.i
    exodiff = transient-sup-vel-form-step-change_out.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations with a step change in porosity using an implementation in which the nonlinear momentum varible incorporates the superficial velocity.'
    cli_args = "Mesh/cartesian/nx=100 Outputs/out/execute_on='final' Executioner/TimeStepper/dt=1e-8"
  []
  [mass_flux_impl_steady]
    type = Exodiff
    input = mass-flux-impl-step-change.i
    exodiff = mass-flux-impl-step-change_out.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equations with a step change in porosity using an implementation in which the advective flux is upwinded to faces and in which the product of porosity and pressure is linearly interpolated to faces.'
    cli_args = 'Mesh/cartesian/nx=10'
  []
  [mass_flux_impl_steady_average]
    type = Exodiff
    input = mass-flux-impl-step-change.i
    exodiff = mass-flux-impl-step-change-average.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equations with a step change in porosity using an implementation in which the advective flux is linearly interpolated to faces and in which the product of porosity and pressure is linearly interpolated to faces.'
    cli_args = "Mesh/cartesian/nx=10 Outputs/out/file_base=mass-flux-impl-step-change-average flux_interp_method='average'"
  []
  [darcy_u_impl_transient_2d]
    type = Exodiff
    input = 2d-transient-sup-vel-form-step-change.i
    exodiff = 2d-transient-sup-vel-form-step-change_out.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations in two dimensions with a step change in porosity using an implementation in which the nonlinear momentum varible incorporates the superficial velocity.'
    cli_args = "Outputs/out/execute_on='final'"
    method = '!dbg'
    valgrind = 'none'
  []
  [mass_flux_impl_transient_2d]
    type = Exodiff
    input = 2d-transient-mass-flux-impl-step-change.i
    exodiff = 2d-transient-mass-flux-impl-step-change_out.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations in two dimensions with a step change in porosity using an implementation in which the advective flux is upwinded to faces and in which the product of porosity and pressure is linearly interpolated to faces.'
    cli_args = "Outputs/out/execute_on='final'"
    method = '!dbg'
    valgrind = 'none'
    abs_zero = 2e-9
  []
  [mass_flux_impl_transient_2d_average]
    type = Exodiff
    input = 2d-transient-mass-flux-impl-step-change.i
    exodiff = 2d-transient-mass-flux-impl-step-change-average.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations in two dimensions with a step change in porosity using an implementation in which the advective flux is linearly interpolated to faces and in which the product of porosity and pressure is linearly interpolated to faces.'
    cli_args = "Outputs/out/execute_on='final' Outputs/out/file_base=2d-transient-mass-flux-impl-step-change-average flux_interp_method='average' -pc_factor_mat_solver_type mumps"
    method = '!dbg'
    valgrind = 'none'
    abs_zero = '1e-8'
  []
  [transient-mass-flux-advector-upwind-advected]
    type = Exodiff
    input = transient-mass-flux-advector.i
    exodiff = transient-mass-flux-advector_out.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations with transient and advective terms in the momentun equation with a step change in porosity using an implementation in which the mass flux is the advector and linearly interpolated, the advected quantities are upwinded, and the product of porosity and pressure is linearly interpolated.'
    cli_args = "Mesh/cartesian/nx=100 Outputs/out/execute_on='final' Executioner/TimeStepper/dt=1e-8"
  []
  [transient-mass-flux-advector-average-advected]
    type = Exodiff
    input = transient-mass-flux-advector.i
    exodiff = transient-mass-flux-advector-average.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations with transient and advective terms in the momentun equation with a step change in porosity using an implementation in which the mass flux is the advector and linearly interpolated, the advected quantities are linearly interpolated, and the product of porosity and pressure is linearly interpolated.'
    cli_args = "Mesh/cartesian/nx=100 Outputs/out/execute_on='final' Outputs/out/file_base=transient-mass-flux-advector-average Executioner/TimeStepper/dt=1e-8 GlobalParams/advected_interp_method='average'"
  []
  [transient-real-velocity-advector-upwind-advected]
    type = Exodiff
    input = transient-real-velocity-advector.i
    exodiff = transient-real-velocity-advector_out.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations with transient and advective terms in the momentun equation with a step change in porosity using an implementation in which the real velocity is the advector and linearly interpolated, the advected quantities are upwinded, and the product of porosity and pressure is linearly interpolated.'
    cli_args = "Mesh/cartesian/nx=100 Outputs/out/execute_on='final' Executioner/TimeStepper/dt=1e-8"
  []
  [transient-real-velocity-advector-average-advected]
    type = Exodiff
    input = transient-real-velocity-advector.i
    exodiff = transient-real-velocity-advector-average.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations with transient and advective terms in the momentun equation with a step change in porosity using an implementation in which the real velocity is the advector and linearly interpolated, the advected quantities are linearly interpolated, and the product of porosity and pressure is linearly interpolated.'
    cli_args = "Mesh/cartesian/nx=100 Outputs/out/execute_on='final' Outputs/out/file_base=transient-real-velocity-advector-average Executioner/TimeStepper/dt=1e-8 GlobalParams/advected_interp_method='average'"
  []
  [2d-transient-real-velocity-advector-upwind-advected]
    type = Exodiff
    input = 2d-transient-real-velocity-advector.i
    exodiff = 2d-transient-real-velocity-advector_out.e
    requirement = 'The system shall be able to solve a porous version of the unsteady Euler equations with transient and advective terms in the momentun equation with a step change in porosity using an implementation in which the real velocity is the advector and linearly interpolated, the advected quantities are upwinded, and the product of porosity and pressure is linearly interpolated.'
    cli_args = "Outputs/out/execute_on='final'"
    method = "!dbg"
    valgrind = 'none'
  []
[]
