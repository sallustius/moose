[Tests]
  [step_ik]
    type = Exodiff
    input = mass-flux-impl-fvik.i
    exodiff = mass-flux-impl-fvik_out.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equations with step changes in porosity using interface kernel objects in which the epsilon grad(pressure) term is integrated by parts to generate two terms, and in which the convective term is discretized using central differencing.'
  []
  [step_fk]
    type = Exodiff
    input = mass-flux-impl-fvfk.i
    exodiff = mass-flux-impl-fvfk_out.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equations with step changes in porosity using flux kernel objects in which the epsilon grad(pressure) term is integrated by parts to generate two terms, and in which the convective term is discretized using central differencing.'
  []
  [step_p_jumps_fk]
    type = Exodiff
    input = mass-flux-impl-p-jumps-fvfk.i
    exodiff = mass-flux-impl-p-jumps-fvfk_out.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equations with step changes in porosity using flux kernel objects in which the epsilon grad(pressure) term is not integrated by parts, and in which the convective term is discretized using central differencing.'
    rel_err = 5e-4
  []
  [kt_jumps]
    type = Exodiff
    input = steady-porous-upwind-impl-fvfk.i
    exodiff = steady-porous-upwind-impl-fvfk_out.e
    requirement = 'The system shall be able to solve a porous version of the steady Euler equation with step changes in porosity using flux kernel objects in which the epsilon grad(pressure) term is integrated by parts to generate two terms, and in which the convective term is discretized using the Kurganov-Tadmor scheme.'
  []
[]
